{
  "password": {
    "prefix": "lyPassword",
    "body": [
      "password = new FormControl('', [",
      "  Validators.required,",
      "  Validators.minLength(8),",
      "  Validators.maxLength(63),",
      "  Validators.pattern('^[\\u0020-\\u007e\\u00a0-\\u00ff]*$'),",
      "]);",
      "",
      "passwordHide = true;",
      ""
    ],
    "description": "password"
  },
  "initService": {
    "prefix": "lyInitService",
    "body": [
      "import { Injectable } from \"@angular/core\";",
      "import { TpRestService } from \"@tp-ui/tp-core\";",
      "",
      "@Injectable({providedIn: 'any'})",
      "export class __FeatureName__Service {",
      "  constructor(private restService: TpRestService){}",
      "  PATH = '';",
      "",
      "}"
    ],
    "description": "initService"
  },
  "tpPasswordStrength": {
    "prefix": "lyTpPasswordStrength",
    "body": [
      "    // passwordStrength: TpPasswordStrength;",
      "    // constructor(private service: TpChangePasswordService) {}",
      "    const init = this.service.initPasswordStrength;",
      "    this.passwordStrength = {",
      "      ...init,",
      "      // 想改變條件或文句",
      "      atLeastCharachter: { enable: true, displayText: '至少要有10個字元', minLimitation: 10 },",
      "      atLeastDigitCharachter: { enable: true, displayText: '至少要有1個數字', minLimitation: 1 },",
      "      atLeastSpecialCharachter: { enable: true, displayText: '至少要有2個特殊字元', minLimitation: 2 },",
      "      // 想打開/關閉驗證而已",
      "      atLeastLowerCharacter: { ...init.atLeastLowerCharacter, enable: true },",
      "      atLeastUpperCharachter: { ...init.atLeastUpperCharachter, enable: true }",
      "    };"
    ],
    "description": "tpPasswordStrength"
  },
  "initComponentsIndex": {
    "prefix": "lyInitComponentsIndex",
    "body": ["export const components: any[] = [];"],
    "description": "initComponentsIndex"
  },
  "initContainersIndex": {
    "prefix": "lyInitContainersIndex",
    "body": ["export const containers: any[] = [];"],
    "description": "initContainersIndex"
  },
  "initRoutingModule": {
    "prefix": "lyInitRoutingModule",
    "body": [
      "import { RouterModule, Routes } from '@angular/router';",
      "",
      "const routes: Routes = [",
      "  {",
      "    path: '',",
      "    //component: yourComponent ",
      "  }",
      "];",
      "",
      "@NgModule({",
      "  imports: [RouterModule.forChild(routes)],",
      "  exports: [RouterModule]",
      "})",
      ""
    ],
    "description": "initRoutingModule"
  },
  "initResolver": {
    "prefix": "lyInitResolver",
    "body": [
      "@Injectable({",
      "  providedIn: 'any'",
      "})",
      "export class YourPageResolver implements Resolve<Observable<any>> {",
      "  constructor(private service: YourePageService, private store: Store) {}",
      "",
      "  resolve(): Observable<any> {",
      "    this.store.dispatch(fromAppActions.pageLoading({ isPageLoading: true }));",
      "",
      "    const pageState$ = this.service.dataYouWantToGet$.pipe(",
      "      take(1),",
      "      tap(data => {",
      "        // do something, like dispatch",
      "      }),",
      "      catchError(error => {",
      "        this.store.dispatch(fromAppRouterActions.go({ payload: { path: ['/500'] } }));",
      "        return EMPTY;",
      "      }),",
      "      finalize(() => this.store.dispatch(fromAppActions.pageLoadingCompletion({ isPageLoading: false })))",
      "    );",
      "",
      "    return pageState$;",
      "  }",
      "}"
    ],
    "description": "initResolver"
  },
  "initComponentStore": {
    "prefix": "lyInitComponentStore",
    "body": [
      "@Injectable()",
      "export class YourFeatureStore extends ComponentStore<YourState> {",
      "  ",
      "  constructor() {",
      "    /** Put initial data to state */",
      "    // super({movies: []});",
      "  }",
      "}"
    ],
    "description": "initComponentStore"
  },
  "initStore": {
    "prefix": "lyInitStore",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ComponentStore } from '@ngrx/component-store';",
      "",
      "@Injectable({ providedIn: 'any' })",
      "export class __YourStore__Store extends ComponentStore<__YourState__> {",
      "  constructor() {",
      "    super();",
      "  }",
      "  // readonly dosDefenseState$: Observable<DosDefenseState> = this.select((state) => state);",
      "",
      "  // readonly setLoading = this.updater((state, value: boolean) => ({ ...state, isLoading: value }));",
      "",
      "  // readonly applyDosDefense = this.effect((value: Observable<DosDefenseItem[]>) =>",
      "  //   value.pipe(",
      "  //     switchMap((newValue) =>",
      "  //       this.dosService.patchDosDefense$(newValue).pipe(",
      "  //         tap((t) => {",
      "  //           this.updateDosDefense(t);",
      "  //           this.toastrService.success('DoS Defense Setting Success.');",
      "  //         }),",
      "  //         catchError((e) => {",
      "  //           this.toastrService.error('DoS Defense Setting Fail.');",
      "  //           return throwError(e);",
      "  //         })",
      "  //       )",
      "  //     )",
      "  //   )",
      "  // );",
      "}",
      ""
    ],
    "description": "initStore"
  },
  "initStories": {
    "prefix": "lyInitStories",
    "body": [
      "import { Meta } from \"@storybook/angular\";",
      "",
      "const meta: Meta = {",
      "  title: 'Material/__ComponentName__',",
      "  component: __yourComponent__,",
      "  decorators: [",
      "    // add this when you need to wrap the component with a decorator",
      "    componentWrapperDecorator(",
      "      (story) =>",
      "        `<div style=\"width: 500px\">${story}</div>`",
      "    ),",
      "    // import components or directives",
      "    moduleMetadata({",
      "      imports: [",
      "        MxIconButtonDirective",
      "      ]",
      "    })",
      "  ],",
      "  // add this when you need to add arguments",
      "  argTypes: {",
      "    color: {",
      "      description: 'Change button colors, this property from mat-button',",
      "      table: {",
      "        type: {",
      "          summary: '\"primary\" | \"warn\"'",
      "        }",
      "      },",
      "      control: {",
      "        type: 'radio'",
      "      },",
      "      options: ['primary', 'warn']",
      "    },",
      "    disabled: {",
      "      description: 'Is button disabled or not, this property from mat-button',",
      "      table: {",
      "        type: {",
      "          summary: 'boolean'",
      "        }",
      "      },",
      "      control: {",
      "        type: 'boolean'",
      "      }",
      "    }",
      "  }",
      "};",
      "",
      "export default meta;",
      "type Story = StoryObj;",
      "// type Story = StoryObj<__yourComponent__>;",
      "",
      "export const renderByComponent: Story = {};",
      "",
      "export const renderByTemplate: Story = {",
      "  render:(args) =>({",
      "    props: args,",
      "    template: ``",
      "  })",
      "};",
      ""
    ],
    "description": "initStories"
  },
  "ReactNewComp": {
    "prefix": "rLyNewComponent",
    "body": [
      "import React from \"react\";",
      "",
      "interface __Name__Props{}",
      "interface __Name__State{}",
      "",
      "export class __Name__ extends React.Component<__Name__Props,__Name__State>{",
      "  constructor(props){",
      "    super(props)",
      "    this.state = {};",
      "  }",
      "",
      "  render(){return <div></div>}",
      "}"
    ],
    "description": "ReactNewComp"
  },
  "Add JS doc comment for empty type": {
    "prefix": "/*type_empty",
    "body": [
      "/**",
      " * Specify what kind of input, default is `text`",
      " * @type {}",
      " */"
    ],
    "description": "Add JS doc comment for empty type"
  },
  "Add JS doc comment for any type": {
    "prefix": "/*type_any",
    "body": ["/**", " * @type { * }", " */"],
    "description": "Add JS doc comment for any type"
  },
  "Add JS doc comment for boolean type": {
    "prefix": "/*type_boolean",
    "body": [
      "/**",
      " * Set to `true` to __prop__ status, default is `false`",
      " * @type { boolean }",
      " */"
    ],
    "description": "Add JS doc comment for boolean type"
  },
  "Add JS doc comment for string type": {
    "prefix": "/*type_string",
    "body": ["/**", " * Set input __prop__", " * @type { string }", " */"],
    "description": "Add JS doc comment for string type"
  },
  "Add JS doc comment for number type": {
    "prefix": "/*type_number",
    "body": [
      "/**",
      " * Set input __prop__ value",
      " * @type { number }",
      " */"
    ],
    "description": "Add JS doc comment for number type"
  }
}
