{
  "password": {
    "prefix": "lyPassword",
    "body": [
      "password = new FormControl('', [",
      "  Validators.required,",
      "  Validators.minLength(8),",
      "  Validators.maxLength(63),",
      "  Validators.pattern('^[\\u0020-\\u007e\\u00a0-\\u00ff]*$'),",
      "]);",
      "",
      "passwordHide = true;",
      ""
    ],
    "description": "password"
  },
  "initService": {
    "prefix": "lyInitService",
    "body": [
      "/****** before Class *******/",
      "const initState: object = {};",
      "",
      "let _state: object = { ...initState };",
      "",
      "@Injectable({",
      "  providedIn: 'root'",
      "})",
      "",
      "/****** in Class *******/",
      "//   constructor(private restService: TpRestService, private tpToastrService: TpToastrService) {}",
      "//   constructor(private restService: TpRestService, private tpToastrService: TpToastrService, private socketService: TpWebSocketService, private authService: AuthService) {}",
      "//   constructor(private restService: TpRestService, private tpToastrService: TpToastrService, private sseService: TpSseService) {}",
      "  private PATH = '';",
      "  private store = new BehaviorSubject<object>(_state);",
      "  state$ = this.store.asObservable();",
      "",
      "  feature$: Observable<object> = this.restService.get(this.PATH).pipe();",
      "",
      "//   Sse$ = this.sseService.create(this.PATH).pipe();",
      "",
      "//   websocket$ = this.authService.websocketToken$.pipe(",
      "//     switchMap(({ token }) =>",
      "//       this.socketService.initialize(",
      "//         `/tags/monitor/system/network?token=${token}`",
      "//       )",
      "//     )",
      "//   );",
      "",
      "",
      "  dipatchState = {",
      "    wifiStateUpdating: () => this.updateState({ ..._state, isLoading: '' }),",
      "  };",
      "",
      "  updateState(newValue: object) {",
      "    this.store.next((_state = newValue));",
      "  }",
      "",
      "  private handelError(toastrMsg, error) {",
      "    this.tpToastrService.error(toastrMsg);",
      "    this.updateState({ ..._state, isLoading: '' });",
      "    return throwError(error);",
      "  }"
    ],
    "description": "initService"
  },
  "tpPasswordStrength": {
    "prefix": "lyTpPasswordStrength",
    "body": [
      "    // passwordStrength: TpPasswordStrength;",
      "    // constructor(private service: TpChangePasswordService) {}",
      "    const init = this.service.initPasswordStrength;",
      "    this.passwordStrength = {",
      "      ...init,",
      "      // 想改變條件或文句",
      "      atLeastCharachter: { enable: true, displayText: '至少要有10個字元', minLimitation: 10 },",
      "      atLeastDigitCharachter: { enable: true, displayText: '至少要有1個數字', minLimitation: 1 },",
      "      atLeastSpecialCharachter: { enable: true, displayText: '至少要有2個特殊字元', minLimitation: 2 },",
      "      // 想打開/關閉驗證而已",
      "      atLeastLowerCharacter: { ...init.atLeastLowerCharacter, enable: true },",
      "      atLeastUpperCharachter: { ...init.atLeastUpperCharachter, enable: true }",
      "    };"
    ],
    "description": "tpPasswordStrength"
  },
  "initComponentsIndex": {
    "prefix": "lyInitComponentsIndex",
    "body": ["export const components: any[] = [];"],
    "description": "initComponentsIndex"
  },
  "initContainersIndex": {
    "prefix": "lyInitContainersIndex",
    "body": ["export const containers: any[] = [];"],
    "description": "initContainersIndex"
  },
  "initRoutingModule": {
    "prefix": "lyInitRoutingModule",
    "body": [
      "import { RouterModule, Routes } from '@angular/router';",
      "",
      "const routes: Routes = [",
      "  {",
      "    path: '',",
      "    //component: yourComponent ",
      "  }",
      "];",
      "",
      "@NgModule({",
      "  imports: [RouterModule.forChild(routes)],",
      "  exports: [RouterModule]",
      "})",
      ""
    ],
    "description": "initRoutingModule"
  },
  "initResolver": {
    "prefix": "lyInitResolver",
    "body": [
      "@Injectable({",
      "  providedIn: 'root'",
      "})",
      "export class YourPageResolver implements Resolve<Observable<any>> {",
      "  constructor(private service: YourePageService, private store: Store) {}",
      "",
      "  resolve(): Observable<any> {",
      "    this.store.dispatch(fromAppActions.pageLoading({ isPageLoading: true }));",
      "",
      "    const pageState$ = this.service.dataYouWantToGet$.pipe(",
      "      take(1),",
      "      tap(data => {",
      "        // do something, like dispatch",
      "      }),",
      "      catchError(error => {",
      "        this.store.dispatch(fromAppRouterActions.go({ payload: { path: ['/500'] } }));",
      "        return EMPTY;",
      "      }),",
      "      finalize(() => this.store.dispatch(fromAppActions.pageLoadingCompletion({ isPageLoading: false })))",
      "    );",
      "",
      "    return pageState$;",
      "  }",
      "}"
    ],
    "description": "initResolver"
  },
  "initComponentStore": {
    "prefix": "lyInitComponentStore",
    "body": [
      "@Injectable()",
      "export class YourFeatureStore extends ComponentStore<YourState> {",
      "  ",
      "  constructor() {",
      "    /** Put initial data to state */",
      "    // super({movies: []});",
      "  }",
      "}"
    ],
    "description": "initComponentStore"
  },
  "initStore": {
    "prefix": "lyInitStore",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ComponentStore } from '@ngrx/component-store';",
      "",
      "@Injectable({ providedIn: 'any' })",
      "export class __YourStore__Store extends ComponentStore<__YourState__> {",
      "  constructor() {",
      "    super();",
      "  }",
      "  // readonly dosDefenseState$: Observable<DosDefenseState> = this.select((state) => state);",
      "",
      "  // readonly setLoading = this.updater((state, value: boolean) => ({ ...state, isLoading: value }));",
      "",
      "  // readonly applyDosDefense = this.effect((value: Observable<DosDefenseItem[]>) =>",
      "  //   value.pipe(",
      "  //     switchMap((newValue) =>",
      "  //       this.dosService.patchDosDefense$(newValue).pipe(",
      "  //         tap((t) => {",
      "  //           this.updateDosDefense(t);",
      "  //           this.toastrService.success('DoS Defense Setting Success.');",
      "  //         }),",
      "  //         catchError((e) => {",
      "  //           this.toastrService.error('DoS Defense Setting Fail.');",
      "  //           return throwError(e);",
      "  //         })",
      "  //       )",
      "  //     )",
      "  //   )",
      "  // );",
      "}",
      ""
    ],
    "description": "initStore"
  }
}
